{"version":3,"names":["FinancialConnectionsSheetError","FinancialConnectionsEventName","FinancialConnectionsEventErrorCode"],"sources":["FinancialConnections.ts"],"sourcesContent":["import type { BankAccount } from './Token';\nimport type { StripeError } from './Errors';\n\nexport type CollectFinancialConnectionsAccountsParams = {\n  /** An optional event listener to receive @type {FinancialConnectionEvent} for specific events during the process of a user connecting their financial accounts. */\n  onEvent?: (event: FinancialConnectionsEvent) => void;\n};\n\nexport type SessionResult =\n  | {\n      /** The updated Financial Connections Session object. */\n      session: Session;\n      error?: undefined;\n    }\n  | {\n      session?: undefined;\n      error: StripeError<FinancialConnectionsSheetError>;\n    };\n\nexport type TokenResult =\n  | {\n      /** The updated Financial Connections Session object. */\n      session: Session;\n      /** The Stripe token object associated with the bank account. */\n      token: BankAccountToken;\n      error?: undefined;\n    }\n  | {\n      session?: undefined;\n      token?: undefined;\n      error: StripeError<FinancialConnectionsSheetError>;\n    };\n\nexport type Session = {\n  /** A unique ID for this session. */\n  id: string;\n  /** The client secret for this session. */\n  clientSecret: string;\n  /** Has the value true if the object exists in live mode or the value false if the object exists in test mode. */\n  livemode: boolean;\n  /** The accounts that were collected as part of this Session. */\n  accounts: Array<Account>;\n};\n\nexport type BankAccountToken = {\n  /** Bank account details. */\n  bankAccount: BankAccount | null;\n  /** Has the value true if the object exists in live mode or the value false if the object exists in test mode. */\n  livemode: boolean;\n  /** A unique ID for this token. */\n  id: string | null;\n  used: boolean;\n  type: 'BankAccount';\n  /** The UNIX timestamp (in milliseconds) of the date this token was created. */\n  created: number | null;\n};\n\nexport type Account = {\n  /** A unique ID for this Financial Connections Account. */\n  id: string;\n  /** Has the value true if the object exists in live mode or the value false if the object exists in test mode. */\n  livemode: boolean;\n  displayName: string | null;\n  /** The current status of the account. Either active, inactive, or disconnected. */\n  status: AccountStatus;\n  institutionName: string;\n  last4: string | null;\n  /** The UNIX timestamp (in milliseconds) of the date this account was created. */\n  created: number;\n  /** The balance of this account. */\n  balance: Balance | null;\n  /** The last balance refresh. Includes the timestamp and the status. */\n  balanceRefresh: BalanceRefresh | null;\n  /** The category of this account, either cash, credit, investment, or other. */\n  category: Category;\n  /** The subcategory of this account, either checking, credit_card, line_of_credit, mortgage, savings, or other. */\n  subcategory: Subcategory;\n  /** Permissions requested for accounts collected during this session. */\n  permissions: Array<Permission> | null;\n  /** The supported payment method types for this account. */\n  supportedPaymentMethodTypes: Array<PaymentMethodType>;\n};\n\nexport type AccountStatus = 'active' | 'inactive' | 'disconnected';\n\nexport type Category = 'cash' | 'credit' | 'investment' | 'other';\n\nexport type PaymentMethodType = 'us_bank_account' | 'link';\n\nexport type Subcategory =\n  | 'checking'\n  | 'creditCard'\n  | 'lineOfCredit'\n  | 'mortgage'\n  | 'other'\n  | 'savings';\n\nexport type Permission =\n  | 'balances'\n  | 'ownership'\n  | 'paymentMethod'\n  | 'transactions'\n  | 'accountNumbers';\n\nexport type Balance = {\n  /** The UNIX timestamp (in milliseconds) of time that the external institution calculated this balance. */\n  asOf: number;\n  /** The type of this balance, either cash or credit. */\n  type: BalanceType;\n  /** The funds available to the account holder. Typically this is the current balance less any holds.  Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.  Each value is an integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. */\n  cash: { available: Map<String, number> | null };\n  /** The credit that has been used by the account holder.  Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.  Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. */\n  credit: { used: Map<String, number> | null };\n  /** The balances owed to (or by) the account holder.  Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.  Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. */\n  current: Map<String, number>;\n};\n\nexport type BalanceRefresh = {\n  status: BalanceRefreshStatus;\n  /** The UNIX timestamp (in milliseconds) of the time at which the last refresh attempt was initiated. */\n  lastAttemptedAt: number;\n};\n\nexport type BalanceType = 'cash' | 'credit';\n\nexport type BalanceRefreshStatus = 'failed' | 'pending' | 'succeeded';\n\nexport enum FinancialConnectionsSheetError {\n  Failed = 'Failed',\n  Canceled = 'Canceled',\n}\n\nexport type FinancialConnectionsEvent = {\n  /** The event's name. Represents the type of event that has occurred during the Financial Connections process. */\n  name: FinancialConnectionsEventName;\n  /** Event-associated metadata. Provides further detail related to the occurred event. */\n  metadata: FinancialConnectionsEventMetadata;\n};\n\nexport enum FinancialConnectionsEventName {\n  /** Invoked when the sheet successfully opens. */\n  Open = 'open',\n  /** Invoked when the manual entry flow is initiated. */\n  ManualEntryInitiated = 'manual_entry_initiated',\n  /** Invoked when \"Agree and continue\" is selected on the consent pane. */\n  ConsentAcquired = 'consent_acquired',\n  /** Invoked when the search bar is selected, the user inputs search terms, and receives an API response. */\n  SearchInitiated = 'search_initiated',\n  /** Invoked when an institution is selected, either from featured institutions or search results. */\n  InstitutionSelected = 'institution_selected',\n  /** Invoked when the authorization is successfully completed. */\n  InstitutionAuthorized = 'institution_authorized',\n  /** Invoked when accounts are selected and \"confirm\" is selected. */\n  AccountsSelected = 'accounts_selected',\n  /** Invoked when the flow is completed and selected accounts are correctly connected to the payment instrument. */\n  Success = 'success',\n  /** Invoked when an error is encountered. Refer to error codes for more details. */\n  Error = 'error',\n  /** Invoked when the flow is cancelled, typically by the user pressing the \"X\" button. */\n  Cancel = 'cancel',\n  /** Invoked when the modal is launched in an external browser. After this event, no other events will be sent until the completion of the browser session. */\n  FlowLaunchedInBrowser = 'flow_launched_in_browser',\n}\n\nexport type FinancialConnectionsEventMetadata = {\n  /** A Boolean value that indicates if the user completed the process through the manual entry flow. */\n  manualEntry?: boolean;\n  /** A String value containing the name of the institution that the user selected. */\n  institutionName?: string;\n  /** An ErrorCode value representing the type of error that occurred. */\n  errorCode?: FinancialConnectionsEventErrorCode;\n};\n\nexport enum FinancialConnectionsEventErrorCode {\n  /** The system could not retrieve account numbers for selected accounts. */\n  AccountNumbersUnavailable = 'account_numbers_unavailable',\n  /** The system could not retrieve accounts for the selected institution. */\n  AccountsUnavailable = 'accounts_unavailable',\n  /** For payment flows, no debitable account was available at the selected institution. */\n  NoDebitableAccount = 'no_debitable_account',\n  /** Authorization with the selected institution has failed. */\n  AuthorizationFailed = 'authorization_failed',\n  /** The selected institution is down for expected maintenance. */\n  InstitutionUnavailablePlanned = 'institution_unavailable_planned',\n  /** The selected institution is unexpectedly down. */\n  InstitutionUnavailableUnplanned = 'institution_unavailable_unplanned',\n  /** A timeout occurred while communicating with our partner or downstream institutions. */\n  InstitutionTimeout = 'institution_timeout',\n  /** An unexpected error occurred, either in an API call or on the client-side. */\n  UnexpectedError = 'unexpected_error',\n  /** The client secret that powers the session has expired. */\n  SessionExpired = 'session_expired',\n  /** The hCaptcha challenge failed. */\n  FailedBotDetection = 'failed_bot_detection',\n}\n"],"mappings":"2LA+HYA,+BAA8B,iFAA9BA,8BAA8B,EAA9BA,8BAA8B,oBAA9BA,8BAA8B,2BAA9BA,8BAA8B,0CAA9BA,8BAA8B,SAY9BC,8BAA6B,+EAA7BA,6BAA6B,EAA7BA,6BAA6B,gBAA7BA,6BAA6B,kDAA7BA,6BAA6B,uCAA7BA,6BAA6B,uCAA7BA,6BAA6B,+CAA7BA,6BAA6B,mDAA7BA,6BAA6B,yCAA7BA,6BAA6B,sBAA7BA,6BAA6B,kBAA7BA,6BAA6B,oBAA7BA,6BAA6B,wDAA7BA,6BAA6B,yCAA7BA,6BAA6B,SAkC7BC,mCAAkC,yFAAlCA,kCAAkC,EAAlCA,kCAAkC,4DAAlCA,kCAAkC,+CAAlCA,kCAAkC,8CAAlCA,kCAAkC,+CAAlCA,kCAAkC,oEAAlCA,kCAAkC,wEAAlCA,kCAAkC,6CAAlCA,kCAAkC,uCAAlCA,kCAAkC,qCAAlCA,kCAAkC,iDAAlCA,kCAAkC,8CAAlCA,kCAAkC"}